
'use strict';

var $ = require('jquery');
var _ = require('lodash');
var Q = require('q');

var Resource = require('./Resource');
var CollectionResource = require('./CollectionResource');
var Serializer = require('./Serializer');

var isResponseError = function isResponseError(status) {

  return 400 <= status && 600 > status;
};

var isValid = function isValid(xhr) {
  return xhr.responseJSON && (xhr.responseJSON.data || xhr.responseJSON.errors);
};

var validateResponse = function validateResponse(xhr) {

  var body = xhr.responseJSON;

  if (!body.data && !body.errors) {
    throw new Error('A document MUST contain either primary data' + 'or an array of error objects.');
  }

  if (body.data) {}
};

var parseErrors = function parseErrors(xhr) {

  if (!(xhr.responseJSON && xhr.responseJSON.errors)) {
    if (isResponseError(xhr.status)) {
      return [{
        status: '' + xhr.status
      }];
    }
    return null;
  }

  var errors = xhr.responseJSON.errors;

  return _.map(errors, function (error) {
    return _.extend({
      status: '' + xhr.status
    }, error);
  });
};

var parseHeaders = function parseHeaders(xhr) {

  var result = [];

  var headerRegex = /^(.*?):[ \t]*([^\r\n]*)$/mg;
  var headersString = xhr.getAllResponseHeaders();
  var findResult;

  while ((findResult = headerRegex.exec(headersString)) !== null) {
    result.push(findResult.slice(1));
  }

  return _.object(result);
};

var Response = function Response(xhr) {

  // validateResponse(xhr);
  this.responseJSON = xhr.responseJSON;
  _.extend(this, xhr.responseJSON);
  this.resource = Serializer(xhr);
  this.data = this.resource ? this.resource.toJSON() : null;
  this.errors = parseErrors(xhr);
  this.headers = parseHeaders(xhr);

  this.nativeXHR = xhr;
};

_.extend(Response.prototype, {});

module.exports = Response;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qc29uYXBpL1Jlc3BvbnNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxZQUFZLENBQUM7O0FBR2IsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFCLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxQixJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7O0FBRXJCLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNyQyxJQUFJLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3pELElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQzs7QUFHekMsSUFBSSxlQUFlLEdBQUcseUJBQVUsTUFBTSxFQUFFOztBQUV0QyxTQUFPLEdBQUcsSUFBSSxNQUFNLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBRTtDQUV2QyxDQUFDOztBQUdGLElBQUksT0FBTyxHQUFHLGlCQUFVLEdBQUcsRUFBRTtBQUMzQixTQUFPLEdBQUcsQ0FBQyxZQUFZLEtBQ3BCLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFBLEFBQUMsQ0FBQztDQUN0RCxDQUFDOztBQUdGLElBQUksZ0JBQWdCLEdBQUcsMEJBQVUsR0FBRyxFQUFFOztBQUVwQyxNQUFJLElBQUksR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDOztBQUU1QixNQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDOUIsVUFBTSxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsR0FDN0MsK0JBQStCLENBQUMsQ0FBQztHQUNsRDs7QUFFRCxNQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFDZDtDQUVGLENBQUM7O0FBR0YsSUFBSSxXQUFXLEdBQUcscUJBQVUsR0FBRyxFQUFFOztBQUUvQixNQUFJLEVBQUUsR0FBRyxDQUFDLFlBQVksSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQSxBQUFFLEVBQUU7QUFDbkQsUUFBSSxlQUFlLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQy9CLGFBQU8sQ0FBQztBQUNOLGNBQU0sRUFBRSxFQUFFLEdBQUcsR0FBRyxDQUFDLE1BQU07T0FDeEIsQ0FBQyxDQUFDO0tBQ0o7QUFDRCxXQUFPLElBQUksQ0FBQztHQUNiOztBQUVELE1BQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDOztBQUVyQyxTQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFVBQVUsS0FBSyxFQUFFO0FBQ3BDLFdBQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUNkLFlBQU0sRUFBRSxFQUFFLEdBQUcsR0FBRyxDQUFDLE1BQU07S0FDeEIsRUFBRSxLQUFLLENBQUMsQ0FBQztHQUNYLENBQUMsQ0FBQztDQUVKLENBQUM7O0FBR0YsSUFBSSxZQUFZLEdBQUcsc0JBQVUsR0FBRyxFQUFFOztBQUVoQyxNQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7O0FBRWhCLE1BQUksV0FBVyxHQUFHLDRCQUE0QixDQUFDO0FBQy9DLE1BQUksYUFBYSxHQUFHLEdBQUcsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0FBQ2hELE1BQUksVUFBVSxDQUFDOztBQUVmLFNBQU8sQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQSxLQUFNLElBQUksRUFBRTtBQUM5RCxVQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztHQUNsQzs7QUFFRCxTQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FFekIsQ0FBQzs7QUFHRixJQUFJLFFBQVEsR0FBRyxrQkFBVSxHQUFHLEVBQUU7OztBQUc1QixNQUFJLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUM7QUFDckMsR0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ2pDLE1BQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLE1BQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQztBQUMxRCxNQUFJLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMvQixNQUFJLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQzs7QUFFakMsTUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7Q0FFdEIsQ0FBQzs7QUFHRixDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsRUFFNUIsQ0FBQyxDQUFDOztBQUdILE1BQU0sQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDIiwiZmlsZSI6InNyYy9qc29uYXBpL1Jlc3BvbnNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4ndXNlIHN0cmljdCc7XG5cblxudmFyICQgPSByZXF1aXJlKCdqcXVlcnknKTtcbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG52YXIgUSA9IHJlcXVpcmUoJ3EnKTtcblxudmFyIFJlc291cmNlID0gcmVxdWlyZSgnLi9SZXNvdXJjZScpO1xudmFyIENvbGxlY3Rpb25SZXNvdXJjZSA9IHJlcXVpcmUoJy4vQ29sbGVjdGlvblJlc291cmNlJyk7XG52YXIgU2VyaWFsaXplciA9IHJlcXVpcmUoJy4vU2VyaWFsaXplcicpO1xuXG5cbnZhciBpc1Jlc3BvbnNlRXJyb3IgPSBmdW5jdGlvbiAoc3RhdHVzKSB7XG5cbiAgcmV0dXJuIDQwMCA8PSBzdGF0dXMgJiYgNjAwID4gc3RhdHVzIDtcblxufTtcblxuXG52YXIgaXNWYWxpZCA9IGZ1bmN0aW9uICh4aHIpIHtcbiAgcmV0dXJuIHhoci5yZXNwb25zZUpTT04gJiZcbiAgICAoeGhyLnJlc3BvbnNlSlNPTi5kYXRhIHx8IHhoci5yZXNwb25zZUpTT04uZXJyb3JzKTtcbn07XG5cblxudmFyIHZhbGlkYXRlUmVzcG9uc2UgPSBmdW5jdGlvbiAoeGhyKSB7XG5cbiAgdmFyIGJvZHkgPSB4aHIucmVzcG9uc2VKU09OO1xuXG4gIGlmICghYm9keS5kYXRhICYmICFib2R5LmVycm9ycykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkEgZG9jdW1lbnQgTVVTVCBjb250YWluIGVpdGhlciBwcmltYXJ5IGRhdGFcIiArXG4gICAgICAgICAgICAgICAgICAgIFwib3IgYW4gYXJyYXkgb2YgZXJyb3Igb2JqZWN0cy5cIik7XG4gIH1cblxuICBpZiAoYm9keS5kYXRhKSB7XG4gIH1cblxufTtcblxuXG52YXIgcGFyc2VFcnJvcnMgPSBmdW5jdGlvbiAoeGhyKSB7XG5cbiAgaWYgKCEoeGhyLnJlc3BvbnNlSlNPTiAmJiB4aHIucmVzcG9uc2VKU09OLmVycm9ycyApKSB7XG4gICAgaWYgKGlzUmVzcG9uc2VFcnJvcih4aHIuc3RhdHVzKSkge1xuICAgICAgcmV0dXJuIFt7XG4gICAgICAgIHN0YXR1czogXCJcIiArIHhoci5zdGF0dXNcbiAgICAgIH1dO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBlcnJvcnMgPSB4aHIucmVzcG9uc2VKU09OLmVycm9ycztcblxuICByZXR1cm4gXy5tYXAoZXJyb3JzLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICByZXR1cm4gXy5leHRlbmQoe1xuICAgICAgc3RhdHVzOiBcIlwiICsgeGhyLnN0YXR1c1xuICAgIH0sIGVycm9yKTtcbiAgfSk7XG5cbn07XG5cblxudmFyIHBhcnNlSGVhZGVycyA9IGZ1bmN0aW9uICh4aHIpIHtcblxuICB2YXIgcmVzdWx0ID0gW107XG5cbiAgdmFyIGhlYWRlclJlZ2V4ID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZztcbiAgdmFyIGhlYWRlcnNTdHJpbmcgPSB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCk7XG4gIHZhciBmaW5kUmVzdWx0O1xuXG4gIHdoaWxlICgoZmluZFJlc3VsdCA9IGhlYWRlclJlZ2V4LmV4ZWMoaGVhZGVyc1N0cmluZykpICE9PSBudWxsKSB7XG4gICAgcmVzdWx0LnB1c2goZmluZFJlc3VsdC5zbGljZSgxKSk7XG4gIH1cblxuICByZXR1cm4gXy5vYmplY3QocmVzdWx0KTtcblxufTtcblxuXG52YXIgUmVzcG9uc2UgPSBmdW5jdGlvbiAoeGhyKSB7XG5cbiAgLy8gdmFsaWRhdGVSZXNwb25zZSh4aHIpO1xuICB0aGlzLnJlc3BvbnNlSlNPTiA9IHhoci5yZXNwb25zZUpTT047XG4gIF8uZXh0ZW5kKHRoaXMsIHhoci5yZXNwb25zZUpTT04pO1xuICB0aGlzLnJlc291cmNlID0gU2VyaWFsaXplcih4aHIpO1xuICB0aGlzLmRhdGEgPSB0aGlzLnJlc291cmNlID8gdGhpcy5yZXNvdXJjZS50b0pTT04oKSA6IG51bGw7XG4gIHRoaXMuZXJyb3JzID0gcGFyc2VFcnJvcnMoeGhyKTtcbiAgdGhpcy5oZWFkZXJzID0gcGFyc2VIZWFkZXJzKHhocik7XG5cbiAgdGhpcy5uYXRpdmVYSFIgPSB4aHI7XG5cbn07XG5cblxuXy5leHRlbmQoUmVzcG9uc2UucHJvdG90eXBlLCB7XG5cbn0pO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gUmVzcG9uc2U7XG4iXX0=