
'use strict';

var _ = require('lodash');
var Q = require('q');
var Backbone = require('backbone');
var Events = Backbone.Events;
var ResourceCollection = require('./ResourceCollection');
var serializer = require('./serializer');
var JSONCamera = require('./lib/JSONCamera');
var diffJSON = require('./lib/diffJSON');

var ResourceSession = function ResourceSession(resources, url, options) {

  if (!resources || !url) {
    throw new Error('unenough arguments');
  }

  if (!resources instanceof ResourceCollection) {
    throw new TypeError();
  }

  options = _.defaults(options || {}, {
    syncronizer: {
      post: function post() {},
      patch: function patch() {},
      'delete': function _delete() {},
      get: function get() {}
    } });

  this.url = url;
  this.cameras = {};
  this.added = [];
  this.removed = [];
  this.changed = [];
  this.resources = resources;
  this.syncronizer = options.syncronizer;

  this.resources.each(function (resource) {

    if (resource.id) {
      this._createCamera(resource).capture();
    } else {
      this.added.push(resource);
    }
  }, this);

  this.listenTo(this.resources, 'add', this._trackAdded);
  this.listenTo(this.resources, 'remove', this._trackRemoved);
  this.listenTo(this.resources, 'change', this._trackChanged);
};

_.extend(ResourceSession.prototype, Events, {

  fetch: function fetch(id) {

    if (!id) {
      throw new Error('id required');
    }

    if (_.isNumber(id)) {
      return this._fetchResourceByID(id);
    } else if (_.isArray(id)) {
      return this._fetchResourcesByIDs(id);
    } else {
      throw new Error('invalid type');
    }
  },

  _fetchResourceByID: function _fetchResourceByID(id) {

    return this.syncronizer.get(this.url + id + '/').then((function (res) {
      var resource = res.resource;
      this.resources.add(resource, { merge: true });
      return resource;
    }).bind(this));
  },

  _fetchResourcesByIDs: function _fetchResourcesByIDs(ids) {

    return this.syncronizer.get(this.url, {
      filter: {
        id: ids
      }
    }).then((function (res) {
      var resource = res.resource;
      this.resources.add(resource.models, { merge: true });
      return resource;
    }).bind(this));
  },

  commit: function commit() {

    this._syncResources();
    this._resetCameras();
    this._resetTrackers();
  },

  _syncResources: function _syncResources() {

    this._patchChangedResources();
    this._postAddedResources();
    this._deleteRemovedResources();
  },

  _patchChangedResources: function _patchChangedResources() {

    var patchData = _.chain(this.changed).filter((function (resource) {
      var camera = this._getCamera(resource);
      return !_.isEqual(camera.first(), camera.last());
    }).bind(this)).map(function (resource) {
      return serializer.serialize(resource, { include: [] }).data;
    }).value();

    if (!_.isEmpty(patchData)) {
      this.syncronizer.patch(this.url, {
        data: patchData
      });
    }
  },

  _postAddedResources: function _postAddedResources() {

    var postData = _.map(this.added, function (resource) {
      return serializer.serialize(resource, { include: [] }).data;
    });

    if (!_.isEmpty(postData)) {
      this.syncronizer.post(this.url, {
        data: postData
      });
    }
  },

  _deleteRemovedResources: function _deleteRemovedResources() {

    var deleteData = _.map(this.removed, function (resource) {
      return resource.toLinkage();
    });

    if (!_.isEmpty(deleteData)) {
      this.syncronizer['delete'](this.url, {
        data: deleteData
      });
    }
  },

  _resetCameras: function _resetCameras() {

    _.each(this.changed, function (resource) {
      var camera = this._getCamera(resource);
      camera.snapshots = camera.snapshots.slice(-1);
    }, this);

    _.each(this.added, function (resource) {
      this._createCamera(resource).capture();
    }, this);

    _.each(this.removed, function (resource) {
      this._removeCamera(resource);
    }, this);
  },

  _resetTrackers: function _resetTrackers() {

    this.addad = [];
    this.removed = [];
    this.changed = [];
  },

  _trackAdded: function _trackAdded(resource) {

    if (_.contains(this.removed, resource)) {
      _.pull(this.removed, this.resources);
      return;
    }
    this.added.push(resource);
  },

  _trackRemoved: function _trackRemoved(resource) {

    if (_.contains(this.added, resource)) {
      _.pull(this.added, this.resources);
      return;
    }
    this.removed.push(resource);
  },

  _trackChanged: function _trackChanged(resource) {

    this.changed.push(resource);
    this._getCamera(resource).capture();
  },

  _createCamera: function _createCamera(resource) {

    var camera = new JSONCamera(resource, function (resource) {
      var JSONResponse = serializer.serialize(resource, { include: [] });
      return JSONResponse.data;
    });

    this.cameras[resource.cid] = camera;

    return camera;
  },

  _removeCamera: function _removeCamera(resource) {

    delete this.cameras[resource.cid];
  },

  _getCamera: function _getCamera(resource) {

    return this.cameras[resource.cid];
  }

});

module.exports = ResourceSession;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qc29uYXBpL1Nlc3Npb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLFlBQVksQ0FBQzs7QUFHYixJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDMUIsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNuQyxJQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO0FBQzdCLElBQUksa0JBQWtCLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDekQsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3pDLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQzdDLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDOztBQUd6QyxJQUFJLGVBQWUsR0FBRyxTQUFTLGVBQWUsQ0FBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRTs7QUFFdkUsTUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLEdBQUcsRUFBRTtBQUN0QixVQUFNLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7R0FDdkM7O0FBRUQsTUFBSSxDQUFDLFNBQVMsWUFBWSxrQkFBa0IsRUFBRTtBQUM1QyxVQUFNLElBQUksU0FBUyxFQUFFLENBQUM7R0FDdkI7O0FBRUQsU0FBTyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxJQUFJLEVBQUUsRUFBRTtBQUNsQyxlQUFXLEVBQUU7QUFDWCxVQUFJLEVBQUUsZ0JBQVksRUFBRTtBQUNwQixXQUFLLEVBQUUsaUJBQVksRUFBRTtBQUNyQixnQkFBUSxtQkFBWSxFQUFFO0FBQ3RCLFNBQUcsRUFBRSxlQUFZLEVBQUU7S0FDcEIsRUFDRixDQUFDLENBQUM7O0FBRUgs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QUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztHQUU3Qjs7QUFFRCxlQUFhLEVBQUUsdUJBQVUsUUFBUSxFQUFFOztBQUVqQyxRQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixRQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0dBRXJDOztBQUVELGVBQWEsRUFBRSx1QkFBVSxRQUFRLEVBQUU7O0FBRWpDLFFBQUksTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLFFBQVEsRUFBRSxVQUFVLFFBQVEsRUFBRTtBQUN4RCxVQUFJLFlBQVksR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ25FLGFBQU8sWUFBWSxDQUFDLElBQUksQ0FBQztLQUMxQixDQUFDLENBQUM7O0FBRUgsUUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDOztBQUVwQyxXQUFPLE1BQU0sQ0FBQztHQUVmOztBQUVELGVBQWEsRUFBRSx1QkFBVSxRQUFRLEVBQUU7O0FBRWpDLFdBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7R0FFbkM7O0FBRUQsWUFBVSxFQUFFLG9CQUFVLFFBQVEsRUFBRTs7QUFFOUIsV0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUVuQzs7Q0FFRixDQUFDLENBQUM7O0FBRUgsTUFBTSxDQUFDLE9BQU8sR0FBRyxlQUFlLENBQUMiLCJmaWxlIjoic3JjL2pzb25hcGkvU2Vzc2lvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG52YXIgUSA9IHJlcXVpcmUoJ3EnKTtcbnZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJyk7XG52YXIgRXZlbnRzID0gQmFja2JvbmUuRXZlbnRzO1xudmFyIFJlc291cmNlQ29sbGVjdGlvbiA9IHJlcXVpcmUoJy4vUmVzb3VyY2VDb2xsZWN0aW9uJyk7XG52YXIgc2VyaWFsaXplciA9IHJlcXVpcmUoJy4vc2VyaWFsaXplcicpO1xudmFyIEpTT05DYW1lcmEgPSByZXF1aXJlKCcuL2xpYi9KU09OQ2FtZXJhJyk7XG52YXIgZGlmZkpTT04gPSByZXF1aXJlKCcuL2xpYi9kaWZmSlNPTicpO1xuXG5cbnZhciBSZXNvdXJjZVNlc3Npb24gPSBmdW5jdGlvbiBSZXNvdXJjZVNlc3Npb24gKHJlc291cmNlcywgdXJsLCBvcHRpb25zKSB7XG5cbiAgaWYgKCFyZXNvdXJjZXMgfHwgIXVybCkge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5lbm91Z2ggYXJndW1lbnRzJyk7XG4gIH1cblxuICBpZiAoIXJlc291cmNlcyBpbnN0YW5jZW9mIFJlc291cmNlQ29sbGVjdGlvbikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBfLmRlZmF1bHRzKG9wdGlvbnMgfHwge30sIHtcbiAgICBzeW5jcm9uaXplcjoge1xuICAgICAgcG9zdDogZnVuY3Rpb24gKCkge30sXG4gICAgICBwYXRjaDogZnVuY3Rpb24gKCkge30sXG4gICAgICBkZWxldGU6IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7fVxuICAgIH0sXG4gIH0pO1xuXG4gIHRoaXMudXJsID0gdXJsO1xuICB0aGlzLmNhbWVyYXMgPSB7fTtcbiAgdGhpcy5hZGRlZCA9IFtdO1xuICB0aGlzLnJlbW92ZWQgPSBbXTtcbiAgdGhpcy5jaGFuZ2VkID0gW107XG4gIHRoaXMucmVzb3VyY2VzID0gcmVzb3VyY2VzO1xuICB0aGlzLnN5bmNyb25pemVyID0gb3B0aW9ucy5zeW5jcm9uaXplcjtcblxuICB0aGlzLnJlc291cmNlcy5lYWNoKGZ1bmN0aW9uIChyZXNvdXJjZSkge1xuXG4gICAgaWYgKHJlc291cmNlLmlkKSB7XG4gICAgICB0aGlzLl9jcmVhdGVDYW1lcmEocmVzb3VyY2UpLmNhcHR1cmUoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmFkZGVkLnB1c2gocmVzb3VyY2UpO1xuICAgIH1cblxuICB9LCB0aGlzKTtcblxuICB0aGlzLmxpc3RlblRvKHRoaXMucmVzb3VyY2VzLCAnYWRkJywgdGhpcy5fdHJhY2tBZGRlZCk7XG4gIHRoaXMubGlzdGVuVG8odGhpcy5yZXNvdXJjZXMsICdyZW1vdmUnLCB0aGlzLl90cmFja1JlbW92ZWQpO1xuICB0aGlzLmxpc3RlblRvKHRoaXMucmVzb3VyY2VzLCAnY2hhbmdlJywgdGhpcy5fdHJhY2tDaGFuZ2VkKTtcblxufTtcblxuXG5fLmV4dGVuZChSZXNvdXJjZVNlc3Npb24ucHJvdG90eXBlLCBFdmVudHMsIHtcblxuICBmZXRjaDogZnVuY3Rpb24gKGlkKSB7XG5cbiAgICBpZiAoIWlkKSB7IHRocm93IG5ldyBFcnJvcignaWQgcmVxdWlyZWQnKTsgfVxuXG4gICAgaWYgKF8uaXNOdW1iZXIoaWQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZmV0Y2hSZXNvdXJjZUJ5SUQoaWQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChfLmlzQXJyYXkoaWQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZmV0Y2hSZXNvdXJjZXNCeUlEcyhpZCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHR5cGUnKTtcbiAgICB9XG5cbiAgfSxcblxuICBfZmV0Y2hSZXNvdXJjZUJ5SUQ6IGZ1bmN0aW9uIChpZCkge1xuXG4gICAgcmV0dXJuIHRoaXMuc3luY3Jvbml6ZXIuZ2V0KHRoaXMudXJsICsgaWQgKyAnLycpXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IHJlcy5yZXNvdXJjZTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZXMuYWRkKHJlc291cmNlLCB7IG1lcmdlOiB0cnVlIH0pO1xuICAgICAgICByZXR1cm4gcmVzb3VyY2U7XG4gICAgICB9LmJpbmQodGhpcykpO1xuXG4gIH0sXG5cbiAgX2ZldGNoUmVzb3VyY2VzQnlJRHM6IGZ1bmN0aW9uIChpZHMpIHtcblxuICAgIHJldHVybiB0aGlzLnN5bmNyb25pemVyLmdldCh0aGlzLnVybCwge1xuICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICBpZDogaWRzXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IHJlcy5yZXNvdXJjZTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZXMuYWRkKHJlc291cmNlLm1vZGVscywgeyBtZXJnZTogdHJ1ZSB9KTtcbiAgICAgICAgcmV0dXJuIHJlc291cmNlO1xuICAgICAgfS5iaW5kKHRoaXMpKTtcblxuICB9LFxuXG4gIGNvbW1pdDogZnVuY3Rpb24gKCkge1xuXG4gICAgdGhpcy5fc3luY1Jlc291cmNlcygpO1xuICAgIHRoaXMuX3Jlc2V0Q2FtZXJhcygpO1xuICAgIHRoaXMuX3Jlc2V0VHJhY2tlcnMoKTtcblxuICB9LFxuXG4gIF9zeW5jUmVzb3VyY2VzOiBmdW5jdGlvbiAoKSB7XG5cbiAgICB0aGlzLl9wYXRjaENoYW5nZWRSZXNvdXJjZXMoKTtcbiAgICB0aGlzLl9wb3N0QWRkZWRSZXNvdXJjZXMoKTtcbiAgICB0aGlzLl9kZWxldGVSZW1vdmVkUmVzb3VyY2VzKCk7XG5cbiAgfSxcblxuICBfcGF0Y2hDaGFuZ2VkUmVzb3VyY2VzOiBmdW5jdGlvbiAoKSB7XG5cbiAgICB2YXIgcGF0Y2hEYXRhID0gXy5jaGFpbih0aGlzLmNoYW5nZWQpXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uIChyZXNvdXJjZSkge1xuICAgICAgICB2YXIgY2FtZXJhID0gdGhpcy5fZ2V0Q2FtZXJhKHJlc291cmNlKTtcbiAgICAgICAgcmV0dXJuICFfLmlzRXF1YWwoY2FtZXJhLmZpcnN0KCksIGNhbWVyYS5sYXN0KCkpO1xuICAgICAgfS5iaW5kKHRoaXMpKVxuICAgICAgLm1hcChmdW5jdGlvbiAocmVzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZXIuc2VyaWFsaXplKHJlc291cmNlLCB7IGluY2x1ZGU6IFtdIH0pLmRhdGE7XG4gICAgICB9KVxuICAgICAgLnZhbHVlKCk7XG5cbiAgICBpZiAoIV8uaXNFbXB0eShwYXRjaERhdGEpKSB7XG4gICAgICB0aGlzLnN5bmNyb25pemVyLnBhdGNoKHRoaXMudXJsLCB7XG4gICAgICAgIGRhdGE6IHBhdGNoRGF0YVxuICAgICAgfSk7XG4gICAgfVxuXG4gIH0sXG5cbiAgX3Bvc3RBZGRlZFJlc291cmNlczogZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIHBvc3REYXRhID0gXy5tYXAodGhpcy5hZGRlZCwgZnVuY3Rpb24gKHJlc291cmNlKSB7XG4gICAgICByZXR1cm4gc2VyaWFsaXplci5zZXJpYWxpemUocmVzb3VyY2UsIHsgaW5jbHVkZTogW10gfSkuZGF0YTtcbiAgICB9KTtcblxuICAgIGlmICghXy5pc0VtcHR5KHBvc3REYXRhKSkge1xuICAgICAgdGhpcy5zeW5jcm9uaXplci5wb3N0KHRoaXMudXJsLCB7XG4gICAgICAgIGRhdGE6IHBvc3REYXRhXG4gICAgICB9KTtcbiAgICB9XG5cbiAgfSxcblxuICBfZGVsZXRlUmVtb3ZlZFJlc291cmNlczogZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIGRlbGV0ZURhdGEgPSBfLm1hcCh0aGlzLnJlbW92ZWQsIGZ1bmN0aW9uIChyZXNvdXJjZSkge1xuICAgICAgcmV0dXJuIHJlc291cmNlLnRvTGlua2FnZSgpO1xuICAgIH0pO1xuXG4gICAgaWYgKCFfLmlzRW1wdHkoZGVsZXRlRGF0YSkpIHtcbiAgICAgIHRoaXMuc3luY3Jvbml6ZXIuZGVsZXRlKHRoaXMudXJsLCB7XG4gICAgICAgIGRhdGE6IGRlbGV0ZURhdGFcbiAgICAgIH0pO1xuICAgIH1cblxuICB9LFxuXG4gIF9yZXNldENhbWVyYXM6IGZ1bmN0aW9uICgpIHtcblxuICAgIF8uZWFjaCh0aGlzLmNoYW5nZWQsIGZ1bmN0aW9uIChyZXNvdXJjZSkge1xuICAgICAgdmFyIGNhbWVyYSA9IHRoaXMuX2dldENhbWVyYShyZXNvdXJjZSk7XG4gICAgICBjYW1lcmEuc25hcHNob3RzID0gY2FtZXJhLnNuYXBzaG90cy5zbGljZSgtMSk7XG4gICAgfSwgdGhpcyk7XG5cbiAgICBfLmVhY2godGhpcy5hZGRlZCwgZnVuY3Rpb24gKHJlc291cmNlKSB7XG4gICAgICB0aGlzLl9jcmVhdGVDYW1lcmEocmVzb3VyY2UpLmNhcHR1cmUoKTtcbiAgICB9LCB0aGlzKTtcblxuICAgIF8uZWFjaCh0aGlzLnJlbW92ZWQsIGZ1bmN0aW9uIChyZXNvdXJjZSkge1xuICAgICAgdGhpcy5fcmVtb3ZlQ2FtZXJhKHJlc291cmNlKTtcbiAgICB9LCB0aGlzKTtcblxuICB9LFxuXG4gIF9yZXNldFRyYWNrZXJzOiBmdW5jdGlvbiAoKSB7XG5cbiAgICB0aGlzLmFkZGFkID0gW107XG4gICAgdGhpcy5yZW1vdmVkID0gW107XG4gICAgdGhpcy5jaGFuZ2VkID0gW107XG5cbiAgfSxcblxuICBfdHJhY2tBZGRlZDogZnVuY3Rpb24gKHJlc291cmNlKSB7XG5cbiAgICBpZiAoXy5jb250YWlucyh0aGlzLnJlbW92ZWQsIHJlc291cmNlKSkge1xuICAgICAgXy5wdWxsKHRoaXMucmVtb3ZlZCwgdGhpcy5yZXNvdXJjZXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmFkZGVkLnB1c2gocmVzb3VyY2UpO1xuXG4gIH0sXG5cbiAgX3RyYWNrUmVtb3ZlZDogZnVuY3Rpb24gKHJlc291cmNlKSB7XG5cbiAgICBpZiAoXy5jb250YWlucyh0aGlzLmFkZGVkLCByZXNvdXJjZSkpIHtcbiAgICAgIF8ucHVsbCh0aGlzLmFkZGVkLCB0aGlzLnJlc291cmNlcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlZC5wdXNoKHJlc291cmNlKTtcblxuICB9LFxuXG4gIF90cmFja0NoYW5nZWQ6IGZ1bmN0aW9uIChyZXNvdXJjZSkge1xuXG4gICAgdGhpcy5jaGFuZ2VkLnB1c2gocmVzb3VyY2UpO1xuICAgIHRoaXMuX2dldENhbWVyYShyZXNvdXJjZSkuY2FwdHVyZSgpO1xuXG4gIH0sXG5cbiAgX2NyZWF0ZUNhbWVyYTogZnVuY3Rpb24gKHJlc291cmNlKSB7XG5cbiAgICB2YXIgY2FtZXJhID0gbmV3IEpTT05DYW1lcmEocmVzb3VyY2UsIGZ1bmN0aW9uIChyZXNvdXJjZSkge1xuICAgICAgdmFyIEpTT05SZXNwb25zZSA9IHNlcmlhbGl6ZXIuc2VyaWFsaXplKHJlc291cmNlLCB7IGluY2x1ZGU6IFtdIH0pO1xuICAgICAgcmV0dXJuIEpTT05SZXNwb25zZS5kYXRhO1xuICAgIH0pO1xuXG4gICAgdGhpcy5jYW1lcmFzW3Jlc291cmNlLmNpZF0gPSBjYW1lcmE7XG5cbiAgICByZXR1cm4gY2FtZXJhO1xuXG4gIH0sXG5cbiAgX3JlbW92ZUNhbWVyYTogZnVuY3Rpb24gKHJlc291cmNlKSB7XG5cbiAgICBkZWxldGUgdGhpcy5jYW1lcmFzW3Jlc291cmNlLmNpZF07XG5cbiAgfSxcblxuICBfZ2V0Q2FtZXJhOiBmdW5jdGlvbiAocmVzb3VyY2UpIHtcblxuICAgIHJldHVybiB0aGlzLmNhbWVyYXNbcmVzb3VyY2UuY2lkXTtcblxuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlc291cmNlU2Vzc2lvbjtcbiJdfQ==