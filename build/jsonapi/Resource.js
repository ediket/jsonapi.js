
'use strict';

var _ = require('lodash');
var Backbone = require('backbone');
var Model = Backbone.Model;
var SerializeMixin = require('./SerializeMixin');

module.exports = Model.extend(_.extend({}, SerializeMixin, {

  sync: function sync() {
    return false;
  },

  initialize: function initialize(options) {

    if (!options || !options.type) {
      throw new Error('type is required');
    }

    this.type = options.type;
    this.links = {};
  },

  addLink: function addLink(key, otherResource) {

    if (!this.isSerializable(otherResource)) {
      throw 'error';
    }

    this.links[key] = otherResource;
    this.trigger('add:link', otherResource, key);

    return this;
  },

  removeLink: function removeLink(key) {

    this.trigger('remove:link', this.links[key], key);
    delete this.links[key];

    return this;
  },

  getLink: function getLink(link) {

    return this.links[link];
  },

  getLinks: function getLinks() {

    return _.clone(this.links);
  },

  setLinks: function setLinks(links) {

    this.links = links;
  },

  toJSON: function toJSON(options) {

    options = _.defaults(options || {}, {
      recursive: false
    });

    var result = Model.prototype.toJSON.apply(this, arguments);
    _.extend(result, _.clone(this.toLinkage()));

    if (options.recursive) {
      _.extend(result, _.mapValues(this.getLinks(), function (resource, key) {
        return resource.toJSON();
      }));
    }

    return _.omit(result, _.isUndefined);
  },

  toLinkage: function toLinkage() {

    return {
      type: this.type,
      id: this.id
    };
  },

  merge: function merge(resource) {

    if (resource.get('id') !== this.get('id') || resource.get('type') !== this.get('type')) {
      throw new Error('type, id doesn\'t match ');
    }

    this.set(resource.toJSON());
    this.setLinks(resource.getLinks());

    return this;
  }

}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qc29uYXBpL1Jlc291cmNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxZQUFZLENBQUM7O0FBR2IsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFCLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNuQyxJQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO0FBQzNCLElBQUksY0FBYyxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDOztBQUdqRCxNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsY0FBYyxFQUFFOztBQUV6RCxNQUFJLEVBQUUsZ0JBQVk7QUFBRSxXQUFPLEtBQUssQ0FBQztHQUFFOztBQUVuQyxZQUFVLEVBQUUsb0JBQVUsT0FBTyxFQUFFOztBQUU3QixRQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtBQUM3QixZQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7S0FDckM7O0FBRUQsUUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0FBQ3pCLFFBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0dBRWpCOztBQUVELFNBQU8sRUFBRSxpQkFBVSxHQUFHLEVBQUUsYUFBYSxFQUFFOztBQUVyQyxRQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsRUFBRTtBQUN2QyxZQUFNLE9BQU8sQ0FBQztLQUNmOztBQUVELFFBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFDO0FBQ2hDLFFBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQzs7QUFFN0MsV0FBTyxJQUFJLENBQUM7R0FFYjs7QUFFRCxZQUFVLEVBQUUsb0JBQVUsR0FBRyxFQUFFOztBQUV6QixRQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2xELFdBQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzs7QUFFdkIsV0FBTyxJQUFJLENBQUM7R0FFYjs7QUFFRCxTQUFPLEVBQUUsaUJBQVUsSUFBSSxFQUFFOztBQUV2QixXQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7R0FFekI7O0FBRUQsVUFBUSxFQUFFLG9CQUFZOztBQUVwQixXQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBRTVCOztBQUVELFVBQVEsRUFBRSxrQkFBVSxLQUFLLEVBQUU7O0FBRXpCLFFBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0dBRXBCOztBQUVELFFBQU0sRUFBRSxnQkFBVSxPQUFPLEVBQUU7O0FBRXpCLFdBQU8sR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sSUFBSSxFQUFFLEVBQUU7QUFDbEMsZUFBUyxFQUFFLEtBQUs7S0FDakIsQ0FBQyxDQUFDOztBQUVILFFBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDM0QsS0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDOztBQUU1QyxRQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUU7QUFDckIsT0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQ2IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsVUFBVSxRQUFRLEVBQUUsR0FBRyxFQUFFO0FBQ3BELGVBQU8sUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO09BQzFCLENBQUMsQ0FDSCxDQUFDO0tBQ0g7O0FBRUQsV0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7R0FFdEM7O0FBRUQsV0FBUyxFQUFFLHFCQUFZOztBQUVyQixXQUFPO0FBQ0wsVUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO0FBQ2YsUUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO0tBQ1osQ0FBQztHQUVIOztBQUVELE9BQUssRUFBRSxlQUFVLFFBQVEsRUFBRTs7QUFFekIsUUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQ3ZDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUMzQyxZQUFNLElBQUksS0FBSyxDQUFDLDBCQUF5QixDQUFDLENBQUM7S0FDNUM7O0FBRUQsUUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUM1QixRQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDOztBQUVuQyxXQUFPLElBQUksQ0FBQztHQUViOztDQUVGLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InNyYy9qc29uYXBpL1Jlc291cmNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4ndXNlIHN0cmljdCc7XG5cblxudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbnZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJyk7XG52YXIgTW9kZWwgPSBCYWNrYm9uZS5Nb2RlbDtcbnZhciBTZXJpYWxpemVNaXhpbiA9IHJlcXVpcmUoJy4vU2VyaWFsaXplTWl4aW4nKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IE1vZGVsLmV4dGVuZChfLmV4dGVuZCh7fSwgU2VyaWFsaXplTWl4aW4sIHtcblxuICBzeW5jOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSxcblxuICBpbml0aWFsaXplOiBmdW5jdGlvbiAob3B0aW9ucykge1xuXG4gICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLnR5cGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigndHlwZSBpcyByZXF1aXJlZCcpO1xuICAgIH1cblxuICAgIHRoaXMudHlwZSA9IG9wdGlvbnMudHlwZTtcbiAgICB0aGlzLmxpbmtzID0ge307XG5cbiAgfSxcblxuICBhZGRMaW5rOiBmdW5jdGlvbiAoa2V5LCBvdGhlclJlc291cmNlKSB7XG5cbiAgICBpZiAoIXRoaXMuaXNTZXJpYWxpemFibGUob3RoZXJSZXNvdXJjZSkpIHtcbiAgICAgIHRocm93ICdlcnJvcic7XG4gICAgfVxuXG4gICAgdGhpcy5saW5rc1trZXldID0gb3RoZXJSZXNvdXJjZTtcbiAgICB0aGlzLnRyaWdnZXIoJ2FkZDpsaW5rJywgb3RoZXJSZXNvdXJjZSwga2V5KTtcblxuICAgIHJldHVybiB0aGlzO1xuXG4gIH0sXG5cbiAgcmVtb3ZlTGluazogZnVuY3Rpb24gKGtleSkge1xuXG4gICAgdGhpcy50cmlnZ2VyKCdyZW1vdmU6bGluaycsIHRoaXMubGlua3Nba2V5XSwga2V5KTtcbiAgICBkZWxldGUgdGhpcy5saW5rc1trZXldO1xuXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgfSxcblxuICBnZXRMaW5rOiBmdW5jdGlvbiAobGluaykge1xuXG4gICAgcmV0dXJuIHRoaXMubGlua3NbbGlua107XG5cbiAgfSxcblxuICBnZXRMaW5rczogZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIF8uY2xvbmUodGhpcy5saW5rcyk7XG5cbiAgfSxcblxuICBzZXRMaW5rczogZnVuY3Rpb24gKGxpbmtzKSB7XG5cbiAgICB0aGlzLmxpbmtzID0gbGlua3M7XG5cbiAgfSxcblxuICB0b0pTT046IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cbiAgICBvcHRpb25zID0gXy5kZWZhdWx0cyhvcHRpb25zIHx8IHt9LCB7XG4gICAgICByZWN1cnNpdmU6IGZhbHNlXG4gICAgfSk7XG5cbiAgICB2YXIgcmVzdWx0ID0gTW9kZWwucHJvdG90eXBlLnRvSlNPTi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIF8uZXh0ZW5kKHJlc3VsdCwgXy5jbG9uZSh0aGlzLnRvTGlua2FnZSgpKSk7XG5cbiAgICBpZiAob3B0aW9ucy5yZWN1cnNpdmUpIHtcbiAgICAgIF8uZXh0ZW5kKHJlc3VsdCxcbiAgICAgICAgXy5tYXBWYWx1ZXModGhpcy5nZXRMaW5rcygpLCBmdW5jdGlvbiAocmVzb3VyY2UsIGtleSkge1xuICAgICAgICAgIHJldHVybiByZXNvdXJjZS50b0pTT04oKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF8ub21pdChyZXN1bHQsIF8uaXNVbmRlZmluZWQpO1xuXG4gIH0sXG5cbiAgdG9MaW5rYWdlOiBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgaWQ6IHRoaXMuaWRcbiAgICB9O1xuXG4gIH0sXG5cbiAgbWVyZ2U6IGZ1bmN0aW9uIChyZXNvdXJjZSkge1xuXG4gICAgaWYgKHJlc291cmNlLmdldChcImlkXCIpICE9PSB0aGlzLmdldChcImlkXCIpIHx8XG4gICAgICByZXNvdXJjZS5nZXQoXCJ0eXBlXCIpICE9PSB0aGlzLmdldChcInR5cGVcIikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInR5cGUsIGlkIGRvZXNuJ3QgbWF0Y2ggXCIpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0KHJlc291cmNlLnRvSlNPTigpKTtcbiAgICB0aGlzLnNldExpbmtzKHJlc291cmNlLmdldExpbmtzKCkpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgfVxuXG59KSk7XG4iXX0=