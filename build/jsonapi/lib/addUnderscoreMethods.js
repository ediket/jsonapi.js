
'use strict';

var _ = require('lodash');

var array = [];
var slice = array.slice;

// Proxy Underscore methods to a Backbone class' prototype using a
// particular attribute as the data argument
var addMethod = function addMethod(length, method, attribute) {
  switch (length) {
    case 1:
      return function () {
        return _[method](this[attribute]);
      };
    case 2:
      return function (value) {
        return _[method](this[attribute], value);
      };
    case 3:
      return function (iteratee, context) {
        return _[method](this[attribute], iteratee, context);
      };
    case 4:
      return function (iteratee, defaultVal, context) {
        return _[method](this[attribute], iteratee, defaultVal, context);
      };
    default:
      return function () {
        var args = slice.call(arguments);
        args.unshift(this[attribute]);
        return _[method].apply(_, args);
      };
  }
};

module.exports = function (Class, methods, attribute) {
  _.each(methods, function (length, method) {
    if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);
  });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qc29uYXBpL2xpYi9hZGRVbmRlcnNjb3JlTWV0aG9kcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsWUFBWSxDQUFDOztBQUdiLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzs7QUFFMUIsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2YsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQzs7OztBQUt4QixJQUFJLFNBQVMsR0FBRyxtQkFBUyxNQUFNLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRTtBQUNsRCxVQUFRLE1BQU07QUFDWixTQUFLLENBQUM7QUFBRSxhQUFPLFlBQVc7QUFDeEIsZUFBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7T0FDbkMsQ0FBQztBQUFBLEFBQ0YsU0FBSyxDQUFDO0FBQUUsYUFBTyxVQUFTLEtBQUssRUFBRTtBQUM3QixlQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7T0FDMUMsQ0FBQztBQUFBLEFBQ0YsU0FBSyxDQUFDO0FBQUUsYUFBTyxVQUFTLFFBQVEsRUFBRSxPQUFPLEVBQUU7QUFDekMsZUFBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztPQUN0RCxDQUFDO0FBQUEsQUFDRixTQUFLLENBQUM7QUFBRSxhQUFPLFVBQVMsUUFBUSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUU7QUFDckQsZUFBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7T0FDbEUsQ0FBQztBQUFBLEFBQ0Y7QUFBUyxhQUFPLFlBQVc7QUFDekIsWUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNqQyxZQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQzlCLGVBQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7T0FDakMsQ0FBQztBQUFBLEdBQ0g7Q0FDRixDQUFDOztBQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBUyxLQUFLLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRTtBQUNuRCxHQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFTLE1BQU0sRUFBRSxNQUFNLEVBQUU7QUFDdkMsUUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztHQUMvRSxDQUFDLENBQUM7Q0FDSixDQUFDIiwiZmlsZSI6InNyYy9qc29uYXBpL2xpYi9hZGRVbmRlcnNjb3JlTWV0aG9kcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5cbnZhciBhcnJheSA9IFtdO1xudmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG5cblxuLy8gUHJveHkgVW5kZXJzY29yZSBtZXRob2RzIHRvIGEgQmFja2JvbmUgY2xhc3MnIHByb3RvdHlwZSB1c2luZyBhXG4vLyBwYXJ0aWN1bGFyIGF0dHJpYnV0ZSBhcyB0aGUgZGF0YSBhcmd1bWVudFxudmFyIGFkZE1ldGhvZCA9IGZ1bmN0aW9uKGxlbmd0aCwgbWV0aG9kLCBhdHRyaWJ1dGUpIHtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfW21ldGhvZF0odGhpc1thdHRyaWJ1dGVdKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX1ttZXRob2RdKHRoaXNbYXR0cmlidXRlXSwgdmFsdWUpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24oaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBfW21ldGhvZF0odGhpc1thdHRyaWJ1dGVdLCBpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgfTtcbiAgICBjYXNlIDQ6IHJldHVybiBmdW5jdGlvbihpdGVyYXRlZSwgZGVmYXVsdFZhbCwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIF9bbWV0aG9kXSh0aGlzW2F0dHJpYnV0ZV0sIGl0ZXJhdGVlLCBkZWZhdWx0VmFsLCBjb250ZXh0KTtcbiAgICB9O1xuICAgIGRlZmF1bHQ6IHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgYXJncy51bnNoaWZ0KHRoaXNbYXR0cmlidXRlXSk7XG4gICAgICByZXR1cm4gX1ttZXRob2RdLmFwcGx5KF8sIGFyZ3MpO1xuICAgIH07XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ2xhc3MsIG1ldGhvZHMsIGF0dHJpYnV0ZSkge1xuICBfLmVhY2gobWV0aG9kcywgZnVuY3Rpb24obGVuZ3RoLCBtZXRob2QpIHtcbiAgICBpZiAoX1ttZXRob2RdKSBDbGFzcy5wcm90b3R5cGVbbWV0aG9kXSA9IGFkZE1ldGhvZChsZW5ndGgsIG1ldGhvZCwgYXR0cmlidXRlKTtcbiAgfSk7XG59O1xuIl19