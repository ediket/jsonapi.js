'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _import = require('lodash');

var _import2 = _interopRequireWildcard(_import);

var array = [];
var slice = array.slice;

var addMethod = function addMethod(length, method, attribute) {
  switch (length) {
    case 1:
      return function () {
        return _import2['default'][method](this[attribute]);
      };
    case 2:
      return function (value) {
        return _import2['default'][method](this[attribute], value);
      };
    case 3:
      return function (iteratee, context) {
        return _import2['default'][method](this[attribute], iteratee, context);
      };
    case 4:
      return function (iteratee, defaultVal, context) {
        return _import2['default'][method](this[attribute], iteratee, defaultVal, context);
      };
    default:
      return function () {
        var args = slice.call(arguments);
        args.unshift(this[attribute]);
        return _import2['default'][method].apply(_import2['default'], args);
      };
  }
};

var addUnderscoreMethods = function addUnderscoreMethods(Class, methods, attribute) {
  _import2['default'].each(methods, function (length, method) {
    if (_import2['default'][method]) Class.prototype[method] = addMethod(length, method, attribute);
  });
};

var collectionMethods = { forEach: 3, each: 3, map: 3, collect: 3, reduce: 4,
  foldl: 4, inject: 4, reduceRight: 4, foldr: 4, find: 3, detect: 3, filter: 3,
  select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 2,
  contains: 2, invoke: 2, max: 3, min: 3, toArray: 1, size: 1, first: 3,
  head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,
  without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,
  isEmpty: 1, chain: 1, sample: 3, partition: 3 };

var addUnderscoreCollectionMethods = function addUnderscoreCollectionMethods(Collection, collectionMethods, attribute) {

  // Mix in each Underscore method as a proxy to `Collection#models`.
  addUnderscoreMethods(Collection, collectionMethods, attribute);

  // Underscore methods that take a property name as an argument.
  var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];

  // Use attributes instead of properties.
  _import2['default'].each(attributeMethods, function (method) {
    if (!_import2['default'][method]) return;
    Collection.prototype[method] = function (value, context) {
      var iterator = _import2['default'].isFunction(value) ? value : function (model) {
        return model.get(value);
      };
      return _import2['default'][method](this.models, iterator, context);
    };
  });
};

// Underscore methods that we want to implement on the Model.
var modelMethods = { keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,
  omit: 0, chain: 1, isEmpty: 1 };

var addUnderscoreModelMethods = function addUnderscoreModelMethods(Model, attributes) {

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  addUnderscoreMethods(Model, modelMethods, attributes);
};

var addUnderscoreMethods;
exports.addUnderscoreMethods = addUnderscoreMethods;
var addUnderscoreModelMethods;
exports.addUnderscoreModelMethods = addUnderscoreModelMethods;
var addUnderscoreCollectionMethods;
exports.addUnderscoreCollectionMethods = addUnderscoreCollectionMethods;
//# sourceMappingURL=data:application/json;base64,