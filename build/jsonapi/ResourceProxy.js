
'use strict';

var _ = require('lodash');
var Q = require('q');
var ResourcePool = require('./ResourcePool');
var singletons = require('./singletons');

var isValidResponse = function isValidResponse(res) {
  return res && res.data && (res.links || res.data.links);
};

var ResourceProxy = function ResourceProxy(options) {

  this.url = options.url || options.links.self;
  this.data = options.data || null;
  this.links = options.links || null;

  this.options = _.omit(options, 'data', 'links', 'url');
  this.syncronizer = options.syncronizer;
  this.pool = options.pool || singletons.pool;
  this.pool.add(this);
};

_.extend(ResourceProxy.prototype, {

  _createNeighbor: function _createNeighbor(options) {

    return new ResourceProxy(_.extend({}, this.options, options));
  },

  fetch: function fetch() {

    return Q.when(this.syncronizer.get(this.url), (function (res) {
      if (!isValidResponse(res)) {
        throw new Error('invalid response!');
      }
      this.data = _.omit(res.data, 'links');
      this.links = res.links || res.data.links;
      return this;
    }).bind(this));
  },

  getData: function getData() {

    return Q.when(this.data ? this : this.fetch(), (function () {
      return this.data;
    }).bind(this));
  },

  setLink: function setLink(key, resource) {

    this.links[key] = {
      related: resource.url
    };
  },

  getLink: function getLink(key) {

    return Q.when(this.links[key] ? this : this.fetch(), (function () {
      return this.links[key];
    }).bind(this));
  },

  getRelated: function getRelated(key) {

    return Q.when(this.getLink(key), (function (links) {
      return this.pool.get(links.related) || this._createNeighbor({ url: links.related });
    }).bind(this));
  }

});

module.exports = ResourceProxy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qc29uYXBpL1Jlc291cmNlUHJveHkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLFlBQVksQ0FBQzs7QUFHYixJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDMUIsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQzdDLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQzs7QUFHekMsSUFBSSxlQUFlLEdBQUcseUJBQVUsR0FBRyxFQUFFO0FBQ25DLFNBQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQSxBQUFDLENBQUM7Q0FDekQsQ0FBQzs7QUFHRixJQUFJLGFBQWEsR0FBRyx1QkFBVSxPQUFPLEVBQUU7O0FBRXJDLE1BQUksQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztBQUM3QyxNQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDO0FBQ2pDLE1BQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUM7O0FBRW5DLE1BQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN2RCxNQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDdkMsTUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUM7QUFDNUMsTUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FFckIsQ0FBQzs7QUFHRixDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUU7O0FBRWhDLGlCQUFlLEVBQUUseUJBQVUsT0FBTyxFQUFFOztBQUVsQyxXQUFPLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztHQUUvRDs7QUFFRCxPQUFLLEVBQUUsaUJBQVk7O0FBRWpCLFdBQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQSxVQUFVLEdBQUcsRUFBRTtBQUMzRCxVQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQ3pCLGNBQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztPQUN0QztBQUNELFVBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3RDLFVBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztBQUN6QyxhQUFPLElBQUksQ0FBQztLQUNiLENBQUEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztHQUVmOztBQUVELFNBQU8sRUFBRSxtQkFBWTs7QUFFbkIsV0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFBLFlBQVk7QUFDekQsYUFBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0tBQ2xCLENBQUEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztHQUVmOztBQUVELFNBQU8sRUFBRSxpQkFBVSxHQUFHLEVBQUUsUUFBUSxFQUFFOztBQUVoQyxRQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHO0FBQ2hCLGFBQU8sRUFBRSxRQUFRLENBQUMsR0FBRztLQUN0QixDQUFDO0dBRUg7O0FBRUQsU0FBTyxFQUFFLGlCQUFVLEdBQUcsRUFBRTs7QUFFdEIsV0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFBLFlBQVk7QUFDL0QsYUFBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3hCLENBQUEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztHQUVmOztBQUVELFlBQVUsRUFBRSxvQkFBVSxHQUFHLEVBQUU7O0FBRXpCLFdBQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUEsVUFBVSxLQUFLLEVBQUU7QUFDaEQsYUFBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQ2pDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7S0FDaEQsQ0FBQSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0dBRWY7O0NBRUYsQ0FBQyxDQUFDOztBQUdILE1BQU0sQ0FBQyxPQUFPLEdBQUcsYUFBYSxDQUFDIiwiZmlsZSI6InNyYy9qc29uYXBpL1Jlc291cmNlUHJveHkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc3RyaWN0JztcblxuXG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xudmFyIFEgPSByZXF1aXJlKCdxJyk7XG52YXIgUmVzb3VyY2VQb29sID0gcmVxdWlyZSgnLi9SZXNvdXJjZVBvb2wnKTtcbnZhciBzaW5nbGV0b25zID0gcmVxdWlyZSgnLi9zaW5nbGV0b25zJyk7XG5cblxudmFyIGlzVmFsaWRSZXNwb25zZSA9IGZ1bmN0aW9uIChyZXMpIHtcbiAgcmV0dXJuIHJlcyAmJiByZXMuZGF0YSAmJiAocmVzLmxpbmtzIHx8IHJlcy5kYXRhLmxpbmtzKTtcbn07XG5cblxudmFyIFJlc291cmNlUHJveHkgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXG4gIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgb3B0aW9ucy5saW5rcy5zZWxmO1xuICB0aGlzLmRhdGEgPSBvcHRpb25zLmRhdGEgfHwgbnVsbDtcbiAgdGhpcy5saW5rcyA9IG9wdGlvbnMubGlua3MgfHwgbnVsbDtcblxuICB0aGlzLm9wdGlvbnMgPSBfLm9taXQob3B0aW9ucywgJ2RhdGEnLCAnbGlua3MnLCAndXJsJyk7XG4gIHRoaXMuc3luY3Jvbml6ZXIgPSBvcHRpb25zLnN5bmNyb25pemVyO1xuICB0aGlzLnBvb2wgPSBvcHRpb25zLnBvb2wgfHwgc2luZ2xldG9ucy5wb29sO1xuICB0aGlzLnBvb2wuYWRkKHRoaXMpO1xuXG59O1xuXG5cbl8uZXh0ZW5kKFJlc291cmNlUHJveHkucHJvdG90eXBlLCB7XG5cbiAgX2NyZWF0ZU5laWdoYm9yOiBmdW5jdGlvbiAob3B0aW9ucykge1xuXG4gICAgcmV0dXJuIG5ldyBSZXNvdXJjZVByb3h5KF8uZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpKTtcblxuICB9LFxuXG4gIGZldGNoOiBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gUS53aGVuKHRoaXMuc3luY3Jvbml6ZXIuZ2V0KHRoaXMudXJsKSwgZnVuY3Rpb24gKHJlcykge1xuICAgICAgaWYgKCFpc1ZhbGlkUmVzcG9uc2UocmVzKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcmVzcG9uc2UhJyk7XG4gICAgICB9XG4gICAgICB0aGlzLmRhdGEgPSBfLm9taXQocmVzLmRhdGEsICdsaW5rcycpO1xuICAgICAgdGhpcy5saW5rcyA9IHJlcy5saW5rcyB8fCByZXMuZGF0YS5saW5rcztcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgfSxcblxuICBnZXREYXRhOiBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gUS53aGVuKHRoaXMuZGF0YSA/IHRoaXMgOiB0aGlzLmZldGNoKCksIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmRhdGE7XG4gICAgfS5iaW5kKHRoaXMpKTtcblxuICB9LFxuXG4gIHNldExpbms6IGZ1bmN0aW9uIChrZXksIHJlc291cmNlKSB7XG5cbiAgICB0aGlzLmxpbmtzW2tleV0gPSB7XG4gICAgICByZWxhdGVkOiByZXNvdXJjZS51cmxcbiAgICB9O1xuXG4gIH0sXG5cbiAgZ2V0TGluazogZnVuY3Rpb24gKGtleSkge1xuXG4gICAgcmV0dXJuIFEud2hlbih0aGlzLmxpbmtzW2tleV0gPyB0aGlzIDogdGhpcy5mZXRjaCgpLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5saW5rc1trZXldO1xuICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgfSxcblxuICBnZXRSZWxhdGVkOiBmdW5jdGlvbiAoa2V5KSB7XG5cbiAgICByZXR1cm4gUS53aGVuKHRoaXMuZ2V0TGluayhrZXkpLCBmdW5jdGlvbiAobGlua3MpIHtcbiAgICAgIHJldHVybiB0aGlzLnBvb2wuZ2V0KGxpbmtzLnJlbGF0ZWQpIHx8XG4gICAgICAgIHRoaXMuX2NyZWF0ZU5laWdoYm9yKHsgdXJsOiBsaW5rcy5yZWxhdGVkIH0pO1xuICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgfVxuXG59KTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlc291cmNlUHJveHk7XG4iXX0=