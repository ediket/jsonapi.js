
'use strict';

var _ = require('lodash');

var array = [];
var slice = array.slice;

// Proxy Underscore methods to a Backbone class' prototype using a
// particular attribute as the data argument
var addMethod = function addMethod(length, method, attribute) {
  switch (length) {
    case 1:
      return function () {
        return _[method](this[attribute]);
      };
    case 2:
      return function (value) {
        return _[method](this[attribute], value);
      };
    case 3:
      return function (iteratee, context) {
        return _[method](this[attribute], iteratee, context);
      };
    case 4:
      return function (iteratee, defaultVal, context) {
        return _[method](this[attribute], iteratee, defaultVal, context);
      };
    default:
      return function () {
        var args = slice.call(arguments);
        args.unshift(this[attribute]);
        return _[method].apply(_, args);
      };
  }
};

module.exports = function (Class, methods, attribute) {
  _.each(methods, function (length, method) {
    if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);
  });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvYWRkVW5kZXJzY29yZU1ldGhvZHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLFlBQVksQ0FBQzs7QUFHYixJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7O0FBRTFCLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNmLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7Ozs7QUFLeEIsSUFBSSxTQUFTLEdBQUcsbUJBQVMsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUU7QUFDbEQsVUFBUSxNQUFNO0FBQ1osU0FBSyxDQUFDO0FBQUUsYUFBTyxZQUFXO0FBQ3hCLGVBQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO09BQ25DLENBQUM7QUFBQSxBQUNGLFNBQUssQ0FBQztBQUFFLGFBQU8sVUFBUyxLQUFLLEVBQUU7QUFDN0IsZUFBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO09BQzFDLENBQUM7QUFBQSxBQUNGLFNBQUssQ0FBQztBQUFFLGFBQU8sVUFBUyxRQUFRLEVBQUUsT0FBTyxFQUFFO0FBQ3pDLGVBQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7T0FDdEQsQ0FBQztBQUFBLEFBQ0YsU0FBSyxDQUFDO0FBQUUsYUFBTyxVQUFTLFFBQVEsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFO0FBQ3JELGVBQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO09BQ2xFLENBQUM7QUFBQSxBQUNGO0FBQVMsYUFBTyxZQUFXO0FBQ3pCLFlBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDakMsWUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUM5QixlQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO09BQ2pDLENBQUM7QUFBQSxHQUNIO0NBQ0YsQ0FBQzs7QUFFRixNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVMsS0FBSyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUU7QUFDbkQsR0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBUyxNQUFNLEVBQUUsTUFBTSxFQUFFO0FBQ3ZDLFFBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7R0FDL0UsQ0FBQyxDQUFDO0NBQ0osQ0FBQyIsImZpbGUiOiJzcmMvbGliL2FkZFVuZGVyc2NvcmVNZXRob2RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4ndXNlIHN0cmljdCc7XG5cblxudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcblxudmFyIGFycmF5ID0gW107XG52YXIgc2xpY2UgPSBhcnJheS5zbGljZTtcblxuXG4vLyBQcm94eSBVbmRlcnNjb3JlIG1ldGhvZHMgdG8gYSBCYWNrYm9uZSBjbGFzcycgcHJvdG90eXBlIHVzaW5nIGFcbi8vIHBhcnRpY3VsYXIgYXR0cmlidXRlIGFzIHRoZSBkYXRhIGFyZ3VtZW50XG52YXIgYWRkTWV0aG9kID0gZnVuY3Rpb24obGVuZ3RoLCBtZXRob2QsIGF0dHJpYnV0ZSkge1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF9bbWV0aG9kXSh0aGlzW2F0dHJpYnV0ZV0pO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBfW21ldGhvZF0odGhpc1thdHRyaWJ1dGVdLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbihpdGVyYXRlZSwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIF9bbWV0aG9kXSh0aGlzW2F0dHJpYnV0ZV0sIGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB9O1xuICAgIGNhc2UgNDogcmV0dXJuIGZ1bmN0aW9uKGl0ZXJhdGVlLCBkZWZhdWx0VmFsLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gX1ttZXRob2RdKHRoaXNbYXR0cmlidXRlXSwgaXRlcmF0ZWUsIGRlZmF1bHRWYWwsIGNvbnRleHQpO1xuICAgIH07XG4gICAgZGVmYXVsdDogcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICBhcmdzLnVuc2hpZnQodGhpc1thdHRyaWJ1dGVdKTtcbiAgICAgIHJldHVybiBfW21ldGhvZF0uYXBwbHkoXywgYXJncyk7XG4gICAgfTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDbGFzcywgbWV0aG9kcywgYXR0cmlidXRlKSB7XG4gIF8uZWFjaChtZXRob2RzLCBmdW5jdGlvbihsZW5ndGgsIG1ldGhvZCkge1xuICAgIGlmIChfW21ldGhvZF0pIENsYXNzLnByb3RvdHlwZVttZXRob2RdID0gYWRkTWV0aG9kKGxlbmd0aCwgbWV0aG9kLCBhdHRyaWJ1dGUpO1xuICB9KTtcbn07XG4iXX0=