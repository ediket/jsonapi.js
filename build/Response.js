
'use strict';

var $ = require('jquery');
var _ = require('lodash');
var Q = require('q');

var Resource = require('./Resource');
var CollectionResource = require('./CollectionResource');
var Serializer = require('./Serializer');

var isResponseError = function isResponseError(status) {

  return 400 <= status && 600 > status;
};

var isValid = function isValid(xhr) {
  return xhr.responseJSON && (xhr.responseJSON.data || xhr.responseJSON.errors);
};

var validateResponse = function validateResponse(xhr) {

  var body = xhr.responseJSON;

  if (!body.data && !body.errors) {
    throw new Error('A document MUST contain either primary data' + 'or an array of error objects.');
  }

  if (body.data) {}
};

var parseErrors = function parseErrors(xhr) {

  if (!(xhr.responseJSON && xhr.responseJSON.errors)) {
    if (isResponseError(xhr.status)) {
      return [{
        status: '' + xhr.status
      }];
    }
    return null;
  }

  var errors = xhr.responseJSON.errors;

  return _.map(errors, function (error) {
    return _.extend({
      status: '' + xhr.status
    }, error);
  });
};

var parseHeaders = function parseHeaders(xhr) {

  var result = [];

  var headerRegex = /^(.*?):[ \t]*([^\r\n]*)$/mg;
  var headersString = xhr.getAllResponseHeaders();
  var findResult;

  while ((findResult = headerRegex.exec(headersString)) !== null) {
    result.push(findResult.slice(1));
  }

  return _.object(result);
};

var Response = function Response(xhr) {

  // validateResponse(xhr);
  this.responseJSON = xhr.responseJSON;
  _.extend(this, xhr.responseJSON);
  this.resource = Serializer(xhr);
  this.data = this.resource ? this.resource.toJSON() : null;
  this.errors = parseErrors(xhr);
  this.headers = parseHeaders(xhr);

  this.nativeXHR = xhr;
};

_.extend(Response.prototype, {});

module.exports = Response;
//# sourceMappingURL=data:application/json;base64,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RyxHQUFHLENBQUMsWUFBWSxDQUFDO0FBQ3JDLEdBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNqQyxNQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQyxNQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUM7QUFDMUQsTUFBSSxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDL0IsTUFBSSxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7O0FBRWpDLE1BQUksQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDO0NBRXRCLENBQUM7O0FBR0YsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLEVBRTVCLENBQUMsQ0FBQzs7QUFHSCxNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyIsImZpbGUiOiJzcmMvUmVzcG9uc2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc3RyaWN0JztcblxuXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbnZhciBRID0gcmVxdWlyZSgncScpO1xuXG52YXIgUmVzb3VyY2UgPSByZXF1aXJlKCcuL1Jlc291cmNlJyk7XG52YXIgQ29sbGVjdGlvblJlc291cmNlID0gcmVxdWlyZSgnLi9Db2xsZWN0aW9uUmVzb3VyY2UnKTtcbnZhciBTZXJpYWxpemVyID0gcmVxdWlyZSgnLi9TZXJpYWxpemVyJyk7XG5cblxudmFyIGlzUmVzcG9uc2VFcnJvciA9IGZ1bmN0aW9uIChzdGF0dXMpIHtcblxuICByZXR1cm4gNDAwIDw9IHN0YXR1cyAmJiA2MDAgPiBzdGF0dXMgO1xuXG59O1xuXG5cbnZhciBpc1ZhbGlkID0gZnVuY3Rpb24gKHhocikge1xuICByZXR1cm4geGhyLnJlc3BvbnNlSlNPTiAmJlxuICAgICh4aHIucmVzcG9uc2VKU09OLmRhdGEgfHwgeGhyLnJlc3BvbnNlSlNPTi5lcnJvcnMpO1xufTtcblxuXG52YXIgdmFsaWRhdGVSZXNwb25zZSA9IGZ1bmN0aW9uICh4aHIpIHtcblxuICB2YXIgYm9keSA9IHhoci5yZXNwb25zZUpTT047XG5cbiAgaWYgKCFib2R5LmRhdGEgJiYgIWJvZHkuZXJyb3JzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQSBkb2N1bWVudCBNVVNUIGNvbnRhaW4gZWl0aGVyIHByaW1hcnkgZGF0YVwiICtcbiAgICAgICAgICAgICAgICAgICAgXCJvciBhbiBhcnJheSBvZiBlcnJvciBvYmplY3RzLlwiKTtcbiAgfVxuXG4gIGlmIChib2R5LmRhdGEpIHtcbiAgfVxuXG59O1xuXG5cbnZhciBwYXJzZUVycm9ycyA9IGZ1bmN0aW9uICh4aHIpIHtcblxuICBpZiAoISh4aHIucmVzcG9uc2VKU09OICYmIHhoci5yZXNwb25zZUpTT04uZXJyb3JzICkpIHtcbiAgICBpZiAoaXNSZXNwb25zZUVycm9yKHhoci5zdGF0dXMpKSB7XG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgc3RhdHVzOiBcIlwiICsgeGhyLnN0YXR1c1xuICAgICAgfV07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGVycm9ycyA9IHhoci5yZXNwb25zZUpTT04uZXJyb3JzO1xuXG4gIHJldHVybiBfLm1hcChlcnJvcnMsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgIHJldHVybiBfLmV4dGVuZCh7XG4gICAgICBzdGF0dXM6IFwiXCIgKyB4aHIuc3RhdHVzXG4gICAgfSwgZXJyb3IpO1xuICB9KTtcblxufTtcblxuXG52YXIgcGFyc2VIZWFkZXJzID0gZnVuY3Rpb24gKHhocikge1xuXG4gIHZhciByZXN1bHQgPSBbXTtcblxuICB2YXIgaGVhZGVyUmVnZXggPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nO1xuICB2YXIgaGVhZGVyc1N0cmluZyA9IHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKTtcbiAgdmFyIGZpbmRSZXN1bHQ7XG5cbiAgd2hpbGUgKChmaW5kUmVzdWx0ID0gaGVhZGVyUmVnZXguZXhlYyhoZWFkZXJzU3RyaW5nKSkgIT09IG51bGwpIHtcbiAgICByZXN1bHQucHVzaChmaW5kUmVzdWx0LnNsaWNlKDEpKTtcbiAgfVxuXG4gIHJldHVybiBfLm9iamVjdChyZXN1bHQpO1xuXG59O1xuXG5cbnZhciBSZXNwb25zZSA9IGZ1bmN0aW9uICh4aHIpIHtcblxuICAvLyB2YWxpZGF0ZVJlc3BvbnNlKHhocik7XG4gIHRoaXMucmVzcG9uc2VKU09OID0geGhyLnJlc3BvbnNlSlNPTjtcbiAgXy5leHRlbmQodGhpcywgeGhyLnJlc3BvbnNlSlNPTik7XG4gIHRoaXMucmVzb3VyY2UgPSBTZXJpYWxpemVyKHhocik7XG4gIHRoaXMuZGF0YSA9IHRoaXMucmVzb3VyY2UgPyB0aGlzLnJlc291cmNlLnRvSlNPTigpIDogbnVsbDtcbiAgdGhpcy5lcnJvcnMgPSBwYXJzZUVycm9ycyh4aHIpO1xuICB0aGlzLmhlYWRlcnMgPSBwYXJzZUhlYWRlcnMoeGhyKTtcblxuICB0aGlzLm5hdGl2ZVhIUiA9IHhocjtcblxufTtcblxuXG5fLmV4dGVuZChSZXNwb25zZS5wcm90b3R5cGUsIHtcblxufSk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBSZXNwb25zZTtcbiJdfQ==